name: ChatGPT Code Review
description: Request code review from ChatGPT
inputs:
  openai-api-key:
    description: Github token
    required: true
  openai-model:
    description: OpenAI model to use
    default: gpt-3.5-turbo-16k
    required: false
  token-limit:
    description: OpenAI model token limit
    default: 16000
    required: false
  github-token:
    description: Github token
    required: true

runs:
  using: composite
  steps:

    - name: Determine fetch depth
      shell: bash
      run: |
        COMMITS=${{ github.event.pull_request.commits }}
        echo BASE_REF="HEAD~$COMMITS" >> $GITHUB_ENV
        echo FETCH_DEPTH=$(( COMMITS + 1 )) >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: ${{ env.FETCH_DEPTH }}

    - name: Install tiktoken
      shell: bash
      run: pip install tiktoken

    - name: Request to ChatGPT Server
      shell: python
      env:
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        OPENAI_MODEL: ${{ inputs.openai-model }}
        TOKEN_LIMIT: ${{ inputs.token-limit }}
      run: |
        import os
        import requests
        import subprocess
        import tiktoken

        REVIEW_PROMPT = "Review the following output of git diff command:"
        OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"
        OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
        OPENAI_MODEL = os.environ["OPENAI_MODEL"]
        TOKEN_LIMIT = int(os.environ["TOKEN_LIMIT"])
        BASE_REF = os.environ["BASE_REF"]
        GITHUB_OUTPUT = os.environ["GITHUB_OUTPUT"]

        def get_diff():
            arguments = [
                "git", "--no-pager", "diff", f"--diff-filter=ACDMRTUXB", f"{BASE_REF}..HEAD"
            ]
            diff_process = subprocess.run(arguments,
                                          capture_output=True,
                                          text=True)
            diff_process.check_returncode()
            return diff_process.stdout.strip()


        def complete(prompt):
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {OPENAI_API_KEY}"
            }
            instructions = """### Instructions: You are an expert code reviewer who can look at the output of git diff command and provide feedback on aspects that are good and aspects that could be improved."""
            body = {
                "model": OPENAI_MODEL,
                "messages": [{"role": "system", "content": instructions}, {"role": "user", "content": prompt}],  # hard cutoff
                "temperature": 0.7,
            }
            response = requests.post(OPENAI_API_URL, headers=headers, json=body)
            response.raise_for_status()
            completion = response.json()["choices"][0]["message"]["content"].strip()
            return completion


        def review_diff(diff):
            assert diff
            return complete("\n".join([REVIEW_PROMPT, diff]))


        if __name__ == "__main__":
            diff = get_diff()
            print(diff)
            if not diff:
                review = "Nothing to review."
            else:
                enc = tiktoken.encoding_for_model(OPENAI_MODEL)
                if (n_tokens := len(enc.encode(diff))) < TOKEN_LIMIT:
                    review = review_diff(diff)
                else:
                    review = f"I cannot meaningfully review a diff with {n_tokens} tokens. Anything under {TOKEN_LIMIT} tokens is fine however."
            with open(GITHUB_OUTPUT, "w") as f:
                print("message<<EOF", file=f)
                print(review, file=f)
                print("EOF", file=f)
      id: code_review

    - name: Delete Previous Comment
      uses: brtknr/delete-comment@v1
      with:
        github_token: "${{ inputs.github-token }}"
        delete_user_name: "github-actions[bot]"
        body_regex: "ChatGPT Code Review"
        issue_number: "${{ github.event.number }}"

    - name: PR comment URL
      uses: actions/github-script@v6
      env:
        MESSAGE: ${{ steps.code_review.outputs.message }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const output = `
          # :sparkles: ChatGPT Code Review :sparkles:

          ${process.env.MESSAGE}
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
